# Email Agent Project - Cursor AI Rules

## ðŸ“‹ Primary Reference
**ALWAYS follow the complete coding standards in `/docs/CODING_STANDARDS.md`**
**ALWAYS prefer fixing a root cause, over working around a problem**

Try to keep what should be in memory out of the code.  Don't hard-code things that could be in procedural or semantic memory.

When making changes, make and test one change at a time, rather than making sweeping changes all together before testing.  Test the one change, and get human approval before moving forward.

Be sceptical!  Don't announce that everything is perfect before it is.  Test, verify, check with a human.

## ðŸš¨ Critical Enforcement Points

### Type Safety & Documentation
- EVERY function MUST have type hints and Google-style docstrings
- Don't brag in the documentation -- say "an email processor" not "a professional world-class enterprise fully wonderful email processor"
- Use `from typing import Optional, List, Dict, Any` as needed

### Configuration & Logging
- ALWAYS use `from src.utils.config import config` for settings
- ALWAYS use `from src.utils.logging_system import get_logger, log_function`
- NO hardcoded values - use `config.*` instead
- NO emoji in log messages - use professional logging

### Code Quality
- Use `@log_function()` decorator on important functions
- Specific exception types, never bare `except:`
- Flask routes need return type hints: `-> tuple[dict, int] | dict`

## âœ… Quick Template
```python
from typing import Dict, List, Optional, Any
from src.utils.config import config
from src.utils.logging_system import get_logger, log_function

logger = get_logger(__name__)

@log_function()
def your_function(param: str, data: Dict[str, Any]) -> Optional[ResultType]:
    """
    Brief description.

    Args:
        param: Description of parameter
        data: Description of data parameter

    Returns:
        Description of return value

    Raises:
        SpecificError: When this specific error occurs
    """
    logger.info(f"Processing: {param}")

    if confidence < config.low_confidence_threshold:
        logger.warning("Low confidence detected")

    return result
```

## be tidy
- clean up after yourself.  don't leave random test files all over the place.  don't leave editor windows open when you won't be using them again.

## ðŸ”— Full Standards
For complete guidelines, examples, and detailed explanations, see:
**`/docs/CODING_STANDARDS.md`**
