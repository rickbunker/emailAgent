{
    "metadata": {
        "description": "Asset matching procedures for procedural memory - algorithms for how to match",
        "version": "1.0.0",
        "type": "procedural_knowledge",
        "category": "asset_matching_procedures"
    },
    "matching_procedures": [
        {
            "procedure_name": "filename_identifier_matching",
            "procedure_type": "asset_matching",
            "description": "How to match filenames to assets using identifier matching",
            "algorithm": {
                "steps": [
                    "Extract filename without extension",
                    "Convert to lowercase for case-insensitive matching",
                    "Query semantic memory for all assets and their identifiers",
                    "For each asset, check if any identifier appears in filename",
                    "Calculate match confidence based on match type",
                    "Return best match above minimum threshold"
                ],
                "confidence_scoring": {
                    "exact_match": 0.9,
                    "partial_match": 0.7,
                    "fuzzy_match_high": 0.6,
                    "fuzzy_match_medium": 0.4,
                    "no_match": 0.0
                },
                "matching_rules": {
                    "case_sensitive": false,
                    "minimum_confidence": 0.15,
                    "fuzzy_threshold": 0.8,
                    "exact_match_bonus": 0.1,
                    "partial_match_penalty": 0.05
                }
            }
        },
        {
            "procedure_name": "semantic_asset_lookup",
            "procedure_type": "asset_matching",
            "description": "How to query semantic memory for asset data during matching",
            "algorithm": {
                "steps": [
                    "Query semantic memory with asset_data category filter",
                    "Extract identifiers list from each asset record",
                    "Return structured asset data for matching algorithms"
                ],
                "query_parameters": {
                    "category": "asset_data",
                    "limit": 100,
                    "include_metadata": true
                }
            }
        },
        {
            "procedure_name": "confidence_calculation",
            "procedure_type": "asset_matching",
            "description": "How to calculate match confidence scores",
            "algorithm": {
                "base_confidence_rules": [
                    "Exact identifier match in filename: 0.9",
                    "Partial identifier match: 0.7",
                    "Fuzzy match above threshold: 0.6",
                    "Multiple identifier matches: +0.1 bonus",
                    "Filename length penalty: -0.05 per 10 extra chars",
                    "Common word penalty: -0.1 for generic terms"
                ],
                "adjustment_factors": {
                    "multiple_matches": 0.1,
                    "filename_length_penalty": 0.005,
                    "common_word_penalty": 0.1,
                    "business_context_bonus": 0.05
                }
            }
        },
        {
            "procedure_name": "fallback_matching",
            "procedure_type": "asset_matching",
            "description": "Fallback procedures when no learned patterns exist",
            "algorithm": {
                "steps": [
                    "Use simple string matching algorithms",
                    "Apply case-insensitive substring search",
                    "Use fuzzy string matching (Levenshtein distance)",
                    "Apply minimum confidence threshold",
                    "Log fallback usage for future learning"
                ],
                "parameters": {
                    "use_fuzzy_matching": true,
                    "fuzzy_ratio_threshold": 80,
                    "minimum_substring_length": 3,
                    "log_fallback_usage": true
                }
            }
        }
    ],
    "learning_procedures": [
        {
            "procedure_name": "asset_match_learning",
            "procedure_type": "learning",
            "description": "How to learn from successful asset matches",
            "algorithm": {
                "steps": [
                    "Record successful filename->asset matches",
                    "Extract patterns from successful matches",
                    "Update confidence scores based on outcomes",
                    "Store learned patterns in procedural memory",
                    "Update semantic memory with new asset data if needed"
                ],
                "learning_triggers": [
                    "Successful automated match",
                    "Human feedback/correction",
                    "Manual asset assignment"
                ]
            }
        }
    ]
}
