[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "email-agent"
version = "1.0.0"
description = "AI-powered email processing and asset document management system"
readme = "README.md"
requires-python = ">=3.8"
authors = [
    {name = "Email Agent Team"}
]
keywords = ["email", "ai", "document", "processing", "asset-management"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Financial and Insurance Industry",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

[tool.black]
line-length = 88
target-version = ["py38", "py39", "py310", "py311"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | \.emailagent
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src", "tests"]
known_third_party = [
    "flask", "qdrant_client", "langchain", "openai",
    "azure", "google", "msgraph", "clamd", "spamassassin"
]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
import_heading_stdlib = "# Standard library imports"
import_heading_thirdparty = "# Third-party imports"
import_heading_firstparty = "# Local application imports"

[tool.mypy]
python_version = "3.8"
mypy_path = ["src"]
namespace_packages = true
explicit_package_bases = true
# Relaxed settings for commit compatibility
warn_return_any = false
warn_unused_configs = false
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = false
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = false
warn_unused_ignores = false
warn_no_return = false
warn_unreachable = false
strict_equality = false
show_error_codes = true
ignore_missing_imports = true

# Exclude problematic directories
exclude = [
    "\\.emailagent/",
    "build/",
    "dist/",
]

# Module-specific configurations
[[tool.mypy.overrides]]
module = [
    "qdrant_client.*",
    "clamd.*",
    "spamassassin.*",
    "google.*",
    "azure.*",
    "msgraph_core.*",
    "langchain.*",
    "openai.*",
    "psutil.*",
    "msal.*",
    "google_auth_oauthlib.*",
    "googleapiclient.*",
]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
pythonpath = ["."]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow tests",
    "email: Email interface tests",
    "ai: AI processing tests",
    "web: Web interface tests",
]
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

[tool.pylint.main]
fail-under = 8.0
ignore = [".emailagent", "build", "dist"]
ignore-patterns = ["test_.*\\.py"]
jobs = 0
load-plugins = ["pylint.extensions.docparams"]

[tool.pylint.format]
max-line-length = 88

[tool.pylint.messages_control]
disable = [
    "too-few-public-methods",
    "too-many-arguments",
    "too-many-instance-attributes",
    "too-many-locals",
    "line-too-long",  # Handled by black
    "missing-module-docstring",  # Not required for all modules
]

[tool.pylint.design]
max-args = 8
max-attributes = 12
max-public-methods = 25

[tool.coverage.run]
source = ["src"]
omit = [
    "tests/*",
    "*/test_*.py",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\\\bProtocol\\\\):",
    "@(abc\\\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", ".emailagent", "build", "dist"]
# Skip acceptable security warnings for development/commit compatibility
skips = [
    "B101",  # assert_used - OK in development/testing
    "B104",  # hardcoded_bind_all_interfaces - OK for Flask development
    "B107",  # hardcoded_password_default - OK for test/demo code
    "B110",  # try_except_pass - Acceptable pattern in some cases
    "B404",  # subprocess_import - Needed for legitimate system integration
    "B603",  # subprocess_without_shell_equals_true - Safe when using lists
    "B607",  # start_process_with_partial_path - Acceptable for well-known tools
]

[tool.ruff]
target-version = "py311"
line-length = 120

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "SIM", # flake8-simplify
    "T201", # Disallow bare print statements (flake8-print)
]
ignore = [
    "E501",  # line too long (handled by formatter)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py
"tests/**/*" = ["E501", "T201"]   # Allow print in tests
"scripts/**/*" = ["T201"]           # Allow print in helper scripts
